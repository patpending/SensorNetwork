package org.dongargon.sensornetwork.xbee;

import gnu.io.CommPort;
import gnu.io.CommPortIdentifier;
import gnu.io.SerialPort;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;

import org.dongargon.sensornetwork.SensorData;
import org.dongargon.util.WirelessSensorConfig;

/**
 * The processing thread
 * */
public class XbeeCommunicator implements Runnable {
	
	InputStream in;
	OutputStream out;
	 boolean debugMode;
		private HashMap<String, FileWriter> fileHandles;
		private HashMap<Object, WirelessSensorConfig> config;
		private SimpleDateFormat df;
		private String battFileDirectory;
		private String tempFileDirectory;
		private String portName;
		
	public XbeeCommunicator (OutputStream out, InputStream in, HashMap<String, FileWriter> fileHandles, HashMap<Object, WirelessSensorConfig> config, SimpleDateFormat df, String tempFileDirectory, String battFileDirectory, boolean debugMode, String portName) throws Exception {

		this.fileHandles = fileHandles;
		this.debugMode = debugMode;
		this.config = config;
		this.df = df;
		this.battFileDirectory = battFileDirectory;
		this.tempFileDirectory = tempFileDirectory;
		this.portName = portName;
	}

	

	public void run() {
		try {
			while (true) {
				SensorData data = readXbeeSensorData();
				if (null != data) {
					writeDataToFile(data);
				}
				Thread.sleep(1000);

			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			closeAllFiles();
		}
	}

	/**
	 * make sure that we have closed all the files on quitting the app
	 */
	private void closeAllFiles() {
		Iterator<String> i = fileHandles.keySet().iterator();
		while (i.hasNext()) {
			String key = i.next();
			FileWriter f = (FileWriter)fileHandles.get(key);
			System.out.println("closing file: " + key);
			try {
				f.close();
			} catch (IOException e) {
				System.out.println("could not close file:" + key);
				e.printStackTrace();
			}
		}

	}

	/**
	 * Connect to the Com port
	 * 
	 * @param portName
	 * @throws Exception
	 */
	void connect(String portName) throws Exception {
		System.setProperty("gnu.io.rxtx.SerialPorts", portName);
		CommPortIdentifier portIdentifier = CommPortIdentifier.getPortIdentifier(portName);
		if (portIdentifier.isCurrentlyOwned()) {
			System.out.println("Error: Port is currently in use");
		} else {
			CommPort commPort = portIdentifier.open(this.getClass().getName(), 2000);

			if (commPort instanceof SerialPort) {
				SerialPort serialPort = (SerialPort) commPort;
				serialPort.setSerialPortParams(9600, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);

				in = serialPort.getInputStream();
				out = serialPort.getOutputStream();

			} else {
				System.out.println("Error: Only serial ports are handled.");
			}
		}
	}

	/**
	 * writes the XRF data out to its file own file. The mapping of the XRF ID
	 * e.g. AA and the Friendly Name is configured via the config file specified
	 * 
	 * @param data
	 */
	private void writeDataToFile(SensorData data) throws Exception {
		// get a nice looking date
		String dateStr = df.format(new Date());
		// lets see if we have a friendly name configured for this sensor
		String friendlyName = convertIDtoFriendlyName(data.getSensorID());
		BufferedWriter out;
		// if its a temperature reading
		if (!data.isBatteryReading()) {
			// do we already have an open file handle for it?
			FileWriter f = (FileWriter) fileHandles.get(friendlyName + ":temp");
			// ok we dont have one
			if (null == f) {
				f = new FileWriter(tempFileDirectory + "/" + friendlyName + ".csv", true);
				out = new BufferedWriter(f);
				fileHandles.put(data.getSensorID(), f);
				out.write(dateStr + "," + Double.toString(data.getReading()));
				out.newLine();
				out.flush();
			}

		} else {
			// do we already have an open file handle for it?
			FileWriter f = (FileWriter)fileHandles.get(friendlyName + ":batt");
			// ok we dont have one
			if (null == f) {
				f = new FileWriter(battFileDirectory + "/" + friendlyName + ".csv", true);
				out = new BufferedWriter(f);
				fileHandles.put(data.getSensorID(), f);
				out.write(dateStr + "," + Double.toString(data.getReading()));
				out.newLine();
				out.flush();
			}
		}

	}

	private String convertIDtoFriendlyName(String sensorID) {

		WirelessSensorConfig conf = (WirelessSensorConfig) config.get(sensorID);
		if (null != conf) {
			return conf.getNiceName();
		} else {
			return sensorID;
		}

	}

	/**
	 * reads the serial data from the socket and calls a method to get it parsed
	 * 
	 * @return
	 * @throws Exception
	 */
	private SensorData readXbeeSensorData() throws Exception {
		if (debugMode) {
			double fakeTemp = Math.random() + 20;
			String fakeData = new String("AABATT" + fakeTemp);
			Thread.sleep(5000);
			return parseXRFData(fakeData);
		} else {
			byte[] buffer = new byte[1024];
			int len = -1;

			if ((len = this.in.read(buffer)) > -1) {
				Thread.sleep(500);// pop in a little sleep to allow the XRF
									// data
									// to complete coming in
				String data = new String(buffer, 0, len);

				return parseXRFData(data);
			}
			return null;
		}
	}

	/**
	 * Method parses the serial data passed in via the argument and returns an
	 * XRFData object representing the reading
	 * 
	 * @param rawData
	 * @return
	 * @throws Exception
	 */
	private SensorData parseXRFData(String rawData) throws Exception {

		// have we actually got real data?
		if (rawData.length() > 1) {
			System.out.println("rawdata:" + rawData);
			// is it a temp reading?
			int start = rawData.indexOf("TMPA");
			if (start > -1) {
				start += 4;
				// data will be in the format AATEMPA2.9. Chop out the
				// sensor ID which is the 'AA' bit
				String id = rawData.substring(start - 6, start - 4);
				double temp = Double.parseDouble(rawData.substring(start, start + 5));
				SensorData data = new SensorData(temp, 0.0, false, id);
				System.out.println(data);
				return data;

			}
			start = rawData.indexOf("BATT");
			if (start > -1) {
				start += 4;
				// data will be in the format AABATTA2.9. Chop out the
				// sensor ID which is the 'AA' bit
				String id = rawData.substring(start - 6, start - 4);

				double batt = Double.parseDouble(rawData.substring(start, start + 4));
				SensorData data = new SensorData(0.0, batt, true, id);
				System.out.println(data);
				return data;

			}
		}
		return null;
	}
}